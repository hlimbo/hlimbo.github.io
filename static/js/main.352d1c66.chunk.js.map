{"version":3,"sources":["logo.svg","HomePageWIP.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","App","createMuiTheme","typography","fontFamily","unityContent","UnityContent","Paper","Container","maxWidth","this","className","class","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,wQC8F5BC,I,iBC7BAC,GApDDC,YAAe,CAC3BC,WAAY,CACVC,WAAY,Y,YAcd,aAAc,IAAD,8BACX,+CAEKC,aAAe,IAAIC,eACtB,yDACA,kDALS,E,sEAUX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,yCACA,kBAAC,IAAD,CAAOJ,aAAcK,KAAKL,aAAcM,UAAU,oBAEpD,iCACE,2CACA,yEAEF,6BAASC,MAAM,iBACb,8CACA,2BAAG,0CAAH,uDACA,2BACE,4BACE,gDAAqB,uBAAGC,KAAK,qDAAR,sDACrB,gFAAqD,uBAAGA,KAAK,wDAAR,wDAArD,6BAAsM,uBAAGA,KAAK,gDAAR,mE,GA3BlMC,IAAMC,YChBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.352d1c66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// Home Page Work In Progress\r\n// Making toolbar navigate to specific sections of my portfolio animate smoothly\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// bad solution need to get a better one... maybe use react router?\r\nfunction scrollToId(id) {\r\n  const el = document.getElementById(id); \r\n  el.scrollIntoView();\r\n}\r\n\r\nfunction HomePage() {\r\n  const [value, setValue] = React.useState(0);\r\n  console.log(\"The value: \", value);\r\n  return(\r\n    <div>\r\n      <AppBar position=\"sticky\" color=\"primary\">\r\n        <Tabs \r\n          centered={true}\r\n          value={value} \r\n          onChange={(event, newValue) => { setValue(newValue); }}>\r\n          <Tab label=\"About Me\" disableRipple={true} onClick={ () => scrollToId('about_me') }/>\r\n          <Tab label=\"Projects\" disableRipple={true} onClick={ () => scrollToId('projects') }/>\r\n        </Tabs>\r\n      </AppBar>\r\n      <div id=\"about_me\">About Me </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div id=\"projects\">Projects</div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n      <div>alfkjalfjaljfalfjlajfla </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport HomePage from './HomePageWIP';\r\nimport Unity, { UnityContent } from 'react-unity-webgl';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: 'Roboto'\r\n  }\r\n});\r\n\r\n// find out what material-ui components I can use out of the box\r\n// to build MVP\r\n// embed MathNinja on my website as homepage for now!\r\n// credit artists etc.....\r\n\r\n// Container Component (Centers content horizontally)\r\n// Does this work with react?\r\n// https://www.npmjs.com/package/react-unity-webgl <- it works like magic :)\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.unityContent = new UnityContent(\r\n      'content/MathNinja_Release/Build/MathNinja_Release.json',\r\n      'content/MathNinja_Release/Build/UnityLoader.js'\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Paper>\r\n        <Container maxWidth=\"md\">\r\n          <h2>MathNinja</h2>\r\n          <Unity unityContent={this.unityContent} className=\"game-container\"/>\r\n        </Container>\r\n        <section>\r\n          <h1>How to Play</h1>\r\n          <p>Use arrow keys to move. Spacebar to Jump.</p>\r\n        </section>\r\n        <section class=\"asset_credits\">\r\n          <h1>Asset Credits:</h1>\r\n          <p><strong>Note: </strong> All art assets used in the game are placeholders. </p>\r\n          <p>\r\n            <ul>\r\n              <li>Ninja (Spelunky) <a href=\"https://www.spriters-resource.com/fullview/56425/\">https://www.spriters-resource.com/fullview/56425/</a></li>\r\n              <li>tiles and background images by Franco Giachetti (<a href=\"http://www.ludicarts.com/free-game-platform-tileset/\">http://www.ludicarts.com/free-game-platform-tileset/</a>) which is licensed under <a href=\"https://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a></li>\r\n            </ul>\r\n          </p>\r\n        </section>\r\n      </Paper>\r\n    );\r\n    //return <HomePage/>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}